buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath group: 'ca.cutterslade.gradle', name: 'gradle-dependency-analyze', version: '1.2.0'
    }
}

plugins {
    //plugin for downloading content from the 'net
    id "de.undercouch.download" version "3.2.0"

    //plugin for producing a tree of task dependencies, run task 'taskTree'
    id "com.dorongold.task-tree" version "1.3"
}

//must be applied to all projects including root
apply plugin: 'ca.cutterslade.analyze'

//if the project has a value for the passed property (i.e from the cmd line via -PpropName=xxx)
//use that, else use a default value
ext.getPropertyOrDefault = { propName, defaultValue -> 
    def val;
    if (project.hasProperty(propName) && project.getProperty(propName) != "unspecified") {
        val = project.getProperty(propName)
        println "Using propery $propName with value $val"
    } else {
        val = defaultValue
        println "Propery $propName has no value, using default value $val"
    }
    return val;
}

def projectGroup = "event-logging"
def projectVersion = "${version}"
def eventLoggingSchemaVer = "v3.1.1-TEST03"
def eventLoggingSchemaMajorVer = "3"
ext.eventLoggingSchemaUrl = "http://github.com/gchq/event-logging-schema/releases/download/${eventLoggingSchemaVer}/event-logging-v${eventLoggingSchemaMajorVer}-jaxb.xsd"

ext.versions = [
    //------event-logging--------------
    eventLogging: getPropertyOrDefault('version', 'SNAPSHOT'),

    //------------3rd-party------------
    jackson: '2.8.9',
    junit: '4.12',
    logback: '1.2.3',
    saxon: '9.6.0-6',
    slf4j: '1.7.22',
    zzDUMMYzz: 'makes sorting easier'
]

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'ca.cutterslade.analyze'
    apply plugin: 'idea'

    group "$projectGroup"
    version "$projectVersion"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenLocal()
    }

    configurations {
        testArtifacts
        sourceArtifacts

        all {
            exclude group: "org.slf4j", module: "slf4j-log4j12"
            exclude group: "log4j", module: "log4j"

            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.name == 'log4j') {
                    details.useTarget "org.slf4j:log4j-over-slf4j:$versions.slf4j"
                }
            }
            resolutionStrategy {
                forcedModules = [
                ]
            }
        }
    }

    task testJar(type: Jar) {
        baseName = "${project.name}-test"
        from sourceSets.test.output
    }

    task sources(type: Jar) {
        baseName = "${project.name}-source"
        from sourceSets.main.allSource
    }

    artifacts {
        testArtifacts testJar
        sourceArtifacts sources
    }

    task packageTests(type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }

    artifacts.archives packageTests

    // This means the reports from our integration tests won't over-write the reports from our unit tests.
    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")

        //Use full logging for test exceptions so we can see where the failure occurred 
        testLogging {
            events "failed"
            exceptionFormat = 'full'
            showStackTraces = true
        }
    }

    clean{
        //clear out the 'out' dirs used by intelliJ
        delete "out"
    }
}

