openapi: 3.0.1
info:
  contact:
    name: event-logging
    url: https://github.com/gchq/event-logging
  description: Various APIs for interacting with Stroom and its data
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Event Logging API
  version: v1/v2
servers:
- url: /api
security:
- ApiKeyAuth: []
paths:
  /event/schema_v4_0:
    post:
      operationId: log_event_v4_0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: event
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      summary: Log an event
      tags:
      - Event
components:
  schemas:
    AccessControlGroups:
      type: object
      properties:
        accessControlGroups:
          type: array
          items:
            type: string
            xml:
              name: AccessControlGroup
          xml:
            name: AccessControlGroup
      required:
      - accessControlGroups
    Activity:
      type: object
      properties:
        id:
          type: string
          xml:
            name: Id
        name:
          type: string
          xml:
            name: Name
        parent:
          $ref: '#/components/schemas/Activity'
      required:
      - id
    AddAccess:
      type: object
      properties:
        accessZones:
          type: array
          items:
            type: string
            xml:
              name: AccessZone
          xml:
            name: AccessZone
      required:
      - accessZones
    AddGroups:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
          xml:
            name: Group
    AdvancedQuery:
      type: object
      properties:
        queryItems:
          type: array
          items:
            $ref: '#/components/schemas/AdvancedQueryItem'
    AdvancedQueryItem:
      type: object
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
      required:
      - '@type'
    AlertEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          change:
            $ref: '#/components/schemas/Change'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          description:
            type: string
            xml:
              name: Description
          ids:
            $ref: '#/components/schemas/IDS'
          malware:
            $ref: '#/components/schemas/AntiMalwareThreat'
          network:
            $ref: '#/components/schemas/Network'
          priority:
            type: string
            enum:
            - NONE
            - LOW
            - NORMAL
            - HIGH
            - URGENT
            - IMMEDIATE
            xml:
              name: Priority
          severity:
            type: string
            enum:
            - INFO
            - MINOR
            - MAJOR
            - CRITICAL
            xml:
              name: Severity
          subject:
            type: string
            xml:
              name: Subject
          type:
            type: string
            enum:
            - VULNERABILITY
            - IDS
            - MALWARE
            - NETWORK
            - CHANGE
            - ERROR
            - OTHER
            xml:
              name: Type
      required:
      - type
    And:
      type: object
      allOf:
      - $ref: '#/components/schemas/AdvancedQueryItem'
    AntiMalwareThreat:
      type: object
      properties:
        infected:
          $ref: '#/components/schemas/MultiObject'
        product:
          $ref: '#/components/schemas/Software'
        signature:
          $ref: '#/components/schemas/Signature'
        threat:
          $ref: '#/components/schemas/Threat'
    AnyContent:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
        contentType:
          type: string
          xml:
            attribute: true
            name: ContentType
        version:
          type: string
          xml:
            attribute: true
            name: Version
    ApprovalEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          action:
            type: string
            enum:
            - APPROVE
            - ACCEPT
            - REJECT
            - REQUEST_APPROVAL
            - OTHER
            xml:
              name: Action
          approvers:
            $ref: '#/components/schemas/Approvers'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          id:
            type: string
            xml:
              name: Id
          outcome:
            $ref: '#/components/schemas/Outcome'
          reason:
            type: string
            xml:
              name: Reason
          requestors:
            $ref: '#/components/schemas/Requestors'
          subject:
            $ref: '#/components/schemas/MultiObject'
      required:
      - action
    Approvers:
      type: object
      properties:
        approvers:
          type: array
          items:
            $ref: '#/components/schemas/User'
          xml:
            name: Approver
      required:
      - approvers
    Association:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          objects:
            $ref: '#/components/schemas/MultiObject'
      required:
      - objects
    Auth:
      type: object
      properties:
        detail:
          type: string
          xml:
            name: Detail
        refNo:
          type: string
          xml:
            name: RefNo
    AuthService:
      type: object
      properties:
        cacheTimeout:
          type: integer
          xml:
            name: CacheTimeout
        id:
          type: string
          xml:
            name: Id
    AuthenticateEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          action:
            type: string
            enum:
            - LOGON
            - LOGOFF
            - CHANGE_PASSWORD
            - RESET_PASSWORD
            - SCREEN_LOCK
            - SCREEN_UNLOCK
            - ACCOUNT_LOCK
            - ACCOUNT_UNLOCK
            - RECONNECT
            - DISCONNECT
            - CONNECT
            - ELEVATE_PRIVILEGE
            - READ_TOKEN
            - OTHER
            xml:
              name: Action
          authenticationEntity:
            $ref: '#/components/schemas/AuthenticationEntity'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          logonType:
            type: string
            enum:
            - INTERACTIVE
            - NETWORK
            - BATCH
            - SERVICE
            - UNLOCK
            - NETWORK_CLEARTEXT
            - NEW_CREDENTIALS
            - REMOTE_INTERACTIVE
            - CACHED_INTERACTIVE
            - CACHED_REMOTE_INTERACTIVE
            - CACHED_UNLOCK
            - PROXY
            - PHYSICAL_ACCESS
            - OTHER
            xml:
              name: LogonType
          outcome:
            $ref: '#/components/schemas/AuthenticateOutcome'
      required:
      - action
    AuthenticateOutcome:
      type: object
      properties:
        authService:
          $ref: '#/components/schemas/AuthService'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        description:
          type: string
          xml:
            name: Description
        permitted:
          type: boolean
          xml:
            name: Permitted
        reason:
          type: string
          enum:
          - INCORRECT_USERNAME_OR_PASSWORD
          - INCORRECT_USERNAME
          - INCORRECT_PASSWORD
          - EXPIRED_CERTIFICATE
          - REVOKED_CERTIFICATE
          - INCORRECT_CA
          - EXPIRED_CA
          - ACCOUNT_LOCKED
          - ACCOUNT_NOT_VALID_FOR_LOGIN_TYPE
          - OTHER
          xml:
            name: Reason
        success:
          type: boolean
          xml:
            name: Success
    AuthenticationEntity:
      type: object
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
      required:
      - '@type'
    Authorisations:
      type: object
      properties:
        auth:
          type: array
          items:
            $ref: '#/components/schemas/Auth'
          xml:
            name: Auth
      required:
      - auth
    AuthoriseEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          action:
            type: string
            enum:
            - REQUEST
            - MODIFY
            xml:
              name: Action
          addGroups:
            $ref: '#/components/schemas/AddGroups'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          objects:
            type: array
            items:
              $ref: '#/components/schemas/BaseObject'
          outcome:
            $ref: '#/components/schemas/Outcome'
          removeGroups:
            $ref: '#/components/schemas/RemoveGroups'
    Banner:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          message:
            type: string
            xml:
              name: Message
          version:
            type: string
            xml:
              name: Version
    BaseObject:
      type: object
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
        classification:
          $ref: '#/components/schemas/Classification'
        description:
          type: string
          xml:
            name: Description
        groups:
          $ref: '#/components/schemas/Groups'
        id:
          type: string
          xml:
            name: Id
        meta:
          type: array
          items:
            $ref: '#/components/schemas/AnyContent'
          xml:
            name: Meta
        name:
          type: string
          xml:
            name: Name
        permissions:
          $ref: '#/components/schemas/Permissions'
        state:
          type: string
          xml:
            name: State
        tags:
          $ref: '#/components/schemas/MetaDataTags'
        type:
          type: string
          xml:
            name: Type
      required:
      - '@type'
    Change:
      type: object
      properties:
        action:
          type: string
          enum:
          - START_SCAN
          - STOP_SCAN
          - FILE_ADDED
          - FILE_REMOVED
          - FILE_MODIFIED
          xml:
            name: Action
        after:
          $ref: '#/components/schemas/MultiObject'
        before:
          $ref: '#/components/schemas/MultiObject'
        rule:
          type: string
          xml:
            name: Rule
      required:
      - action
    Chat:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          content:
            type: string
            xml:
              name: Content
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          from:
            $ref: '#/components/schemas/User'
          room:
            type: string
            xml:
              name: Room
          sessionId:
            type: string
            xml:
              name: SessionId
          to:
            type: array
            items:
              $ref: '#/components/schemas/User'
            xml:
              name: To
    Classification:
      type: object
      properties:
        andGroups:
          $ref: '#/components/schemas/AccessControlGroups'
        classification:
          type: string
          xml:
            name: Classification
        custodian:
          $ref: '#/components/schemas/Organisation'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        descriptors:
          $ref: '#/components/schemas/Descriptors'
        disposition:
          $ref: '#/components/schemas/Disposition'
        disseminationControls:
          $ref: '#/components/schemas/DisseminationControls'
        orGroups:
          $ref: '#/components/schemas/AccessControlGroups'
        originator:
          $ref: '#/components/schemas/Organisation'
        permittedNationalities:
          $ref: '#/components/schemas/PermittedNationalities'
        permittedOrganisations:
          $ref: '#/components/schemas/PermittedOrganisations'
        text:
          type: string
          xml:
            name: Text
    Configuration:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
    Coordinates:
      type: object
      properties:
        latitude:
          type: number
          xml:
            name: Latitude
        longitude:
          type: number
          xml:
            name: Longitude
      required:
      - latitude
      - longitude
    CopyEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          destination:
            $ref: '#/components/schemas/MultiObject'
          outcome:
            $ref: '#/components/schemas/CopyMoveOutcome'
          source:
            $ref: '#/components/schemas/MultiObject'
      required:
      - destination
      - source
    CopyMoveOutcome:
      type: object
      properties:
        authService:
          $ref: '#/components/schemas/AuthService'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        description:
          type: string
          xml:
            name: Description
        permitted:
          type: boolean
          xml:
            name: Permitted
        reason:
          type: string
          enum:
          - DEVICE_FULL
          - IO_ERROR
          - INVALID_PATH
          - PERMISSION_DENIED
          - READ_ONLY
          xml:
            name: Reason
        success:
          type: boolean
          xml:
            name: Success
    CreateEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          objects:
            type: array
            items:
              $ref: '#/components/schemas/BaseObject'
          outcome:
            $ref: '#/components/schemas/Outcome'
    Criteria:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          dataSources:
            $ref: '#/components/schemas/DataSources'
          query:
            $ref: '#/components/schemas/Query'
          resultPage:
            $ref: '#/components/schemas/ResultPage'
          results:
            $ref: '#/components/schemas/MultiObject'
          totalResults:
            type: integer
            xml:
              name: TotalResults
    Data:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        name:
          type: string
          xml:
            attribute: true
            name: Name
        value:
          type: string
          xml:
            attribute: true
            name: Value
    DataSources:
      type: object
      properties:
        dataSource:
          type: array
          items:
            type: string
            xml:
              name: DataSource
          xml:
            name: DataSource
      required:
      - dataSource
    DeleteEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          objects:
            type: array
            items:
              $ref: '#/components/schemas/BaseObject'
          outcome:
            $ref: '#/components/schemas/Outcome'
    Descriptors:
      type: object
      properties:
        descriptor:
          type: array
          items:
            type: string
            xml:
              name: Descriptor
          xml:
            name: Descriptor
      required:
      - descriptor
    Destination:
      type: object
      properties:
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
    Device:
      type: object
      allOf:
      - $ref: '#/components/schemas/AuthenticationEntity'
      - type: object
        properties:
          classification:
            $ref: '#/components/schemas/Classification'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          hostName:
            type: string
            xml:
              name: HostName
          id:
            type: string
            xml:
              name: Id
          ipAddress:
            type: string
            xml:
              name: IPAddress
          ipaddress:
            type: string
          location:
            $ref: '#/components/schemas/Location'
          macAddress:
            type: string
            xml:
              name: MACAddress
          macaddress:
            type: string
          name:
            type: string
            xml:
              name: Name
          port:
            type: integer
            format: int32
            xml:
              name: Port
      - $ref: '#/components/schemas/Endpoint'
    Disposition:
      type: object
      properties:
        date:
          type: string
          format: date-time
          xml:
            name: Date
        process:
          type: string
          xml:
            name: Process
      required:
      - date
      - process
    DisseminationControls:
      type: object
      properties:
        disseminationControl:
          type: array
          items:
            type: string
            xml:
              name: DisseminationControl
          xml:
            name: DisseminationControl
      required:
      - disseminationControl
    Document:
      type: object
      properties:
        accessed:
          type: string
          format: date-time
          xml:
            name: Accessed
        classification:
          $ref: '#/components/schemas/Classification'
        created:
          type: string
          format: date-time
          xml:
            name: Created
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        description:
          type: string
          xml:
            name: Description
        groups:
          $ref: '#/components/schemas/Groups'
        id:
          type: string
          xml:
            name: Id
        meta:
          type: array
          items:
            $ref: '#/components/schemas/AnyContent'
          xml:
            name: Meta
        modified:
          type: string
          format: date-time
          xml:
            name: Modified
        name:
          type: string
          xml:
            name: Name
        pages:
          type: integer
          xml:
            name: Pages
        path:
          type: string
          xml:
            name: Path
        permissions:
          $ref: '#/components/schemas/Permissions'
        reference:
          type: string
          xml:
            name: Reference
        size:
          type: integer
          xml:
            name: Size
        state:
          type: string
          xml:
            name: State
        tags:
          $ref: '#/components/schemas/MetaDataTags'
        title:
          type: string
          xml:
            name: Title
        type:
          type: string
          xml:
            name: Type
        version:
          type: string
          xml:
            name: Version
    Door:
      type: object
      properties:
        addAccess:
          $ref: '#/components/schemas/AddAccess'
        description:
          type: string
          xml:
            name: Description
        location:
          $ref: '#/components/schemas/Location'
        name:
          type: string
          xml:
            name: Name
        removeAll:
          type: boolean
          xml:
            name: RemoveAll
        singleEntry:
          type: boolean
          xml:
            name: SingleEntry
      required:
      - addAccess
      - location
      - name
    Email:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          bcc:
            type: array
            items:
              $ref: '#/components/schemas/User'
            xml:
              name: Bcc
          cc:
            type: array
            items:
              $ref: '#/components/schemas/User'
            xml:
              name: Cc
          content:
            type: string
            xml:
              name: Content
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          from:
            $ref: '#/components/schemas/User'
          mimeType:
            type: string
            xml:
              name: MimeType
          subject:
            type: string
            xml:
              name: Subject
          to:
            type: array
            items:
              $ref: '#/components/schemas/User'
            xml:
              name: To
    Endpoint:
      type: object
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
      required:
      - '@type'
    Event:
      type: object
      properties:
        classification:
          $ref: '#/components/schemas/Classification'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        eventChain:
          $ref: '#/components/schemas/EventChain'
        eventDetail:
          $ref: '#/components/schemas/EventDetail'
        eventSource:
          $ref: '#/components/schemas/EventSource'
        eventTime:
          $ref: '#/components/schemas/EventTime'
        meta:
          type: array
          items:
            $ref: '#/components/schemas/AnyContent'
          xml:
            name: Meta
      required:
      - eventDetail
      - eventSource
      - eventTime
      xml:
        name: Event
    EventAction:
      type: object
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
      required:
      - '@type'
    EventChain:
      type: object
      properties:
        activity:
          $ref: '#/components/schemas/Activity'
      required:
      - activity
    EventDetail:
      type: object
      properties:
        description:
          type: string
          xml:
            name: Description
        eventAction:
          $ref: '#/components/schemas/EventAction'
        purpose:
          $ref: '#/components/schemas/Purpose'
        typeId:
          type: string
          xml:
            name: TypeId
      required:
      - typeId
    EventSource:
      type: object
      properties:
        client:
          $ref: '#/components/schemas/Device'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        device:
          $ref: '#/components/schemas/Device'
        door:
          $ref: '#/components/schemas/Door'
        eventId:
          type: string
          xml:
            name: EventId
        generator:
          type: string
          xml:
            name: Generator
        interactive:
          type: boolean
          xml:
            name: Interactive
        runAs:
          $ref: '#/components/schemas/User'
        server:
          $ref: '#/components/schemas/Device'
        sessionId:
          type: string
          xml:
            name: SessionId
        system:
          $ref: '#/components/schemas/SystemDetail'
        user:
          $ref: '#/components/schemas/User'
      required:
      - device
      - generator
      - system
    EventTime:
      type: object
      properties:
        timeCreated:
          type: string
          format: date-time
          xml:
            name: TimeCreated
        timeSource:
          $ref: '#/components/schemas/Device'
      required:
      - timeCreated
    ExportEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          destination:
            $ref: '#/components/schemas/MultiObject'
          outcome:
            $ref: '#/components/schemas/Outcome'
          source:
            $ref: '#/components/schemas/MultiObject'
    File:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          accessed:
            type: string
            format: date-time
            xml:
              name: Accessed
          created:
            type: string
            format: date-time
            xml:
              name: Created
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          hash:
            $ref: '#/components/schemas/Hash'
          media:
            $ref: '#/components/schemas/Media'
          modified:
            type: string
            format: date-time
            xml:
              name: Modified
          path:
            type: string
            xml:
              name: Path
          size:
            type: integer
            xml:
              name: Size
    Folder:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          accessed:
            type: string
            format: date-time
            xml:
              name: Accessed
          created:
            type: string
            format: date-time
            xml:
              name: Created
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          hash:
            $ref: '#/components/schemas/Hash'
          media:
            $ref: '#/components/schemas/Media'
          modified:
            type: string
            format: date-time
            xml:
              name: Modified
          path:
            type: string
            xml:
              name: Path
          size:
            type: integer
            xml:
              name: Size
    Group:
      type: object
      allOf:
      - $ref: '#/components/schemas/PermissionEntity'
      - type: object
        properties:
          classification:
            $ref: '#/components/schemas/Classification'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          description:
            type: string
            xml:
              name: Description
          groups:
            $ref: '#/components/schemas/Groups'
          id:
            type: string
            xml:
              name: Id
          meta:
            type: array
            items:
              $ref: '#/components/schemas/AnyContent'
            xml:
              name: Meta
          name:
            type: string
            xml:
              name: Name
          permissions:
            $ref: '#/components/schemas/Permissions'
          state:
            type: string
            xml:
              name: State
          tags:
            $ref: '#/components/schemas/MetaDataTags'
          type:
            type: string
            xml:
              name: Type
      - $ref: '#/components/schemas/BaseObject'
      - $ref: '#/components/schemas/AuthenticationEntity'
    GroupChat:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          content:
            type: string
            xml:
              name: Content
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          from:
            $ref: '#/components/schemas/User'
          room:
            type: string
            xml:
              name: Room
          sessionId:
            type: string
            xml:
              name: SessionId
          to:
            type: array
            items:
              $ref: '#/components/schemas/User'
            xml:
              name: To
    Groups:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
          xml:
            name: Group
    Hardware:
      type: object
      allOf:
      - $ref: '#/components/schemas/InstallationEntity'
      - type: object
        properties:
          capacity:
            type: integer
            xml:
              name: Capacity
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          id:
            type: string
            xml:
              name: Id
          manufacturer:
            type: string
            xml:
              name: Manufacturer
          model:
            type: string
            xml:
              name: Model
          name:
            type: string
            xml:
              name: Name
          type:
            type: string
            enum:
            - OPTICAL_DRIVE
            - HARD_DISK
            - USB_MASS_STORAGE
            - PRINTER
            - MODEM
            - KEYBOARD
            - MOUSE
            - WEBCAM
            - OTHER
            xml:
              name: Type
      required:
      - type
    Hash:
      type: object
      properties:
        type:
          type: string
          xml:
            attribute: true
            name: Type
        value:
          type: string
    IDS:
      type: object
      properties:
        destination:
          $ref: '#/components/schemas/NetworkLocation'
        payload:
          $ref: '#/components/schemas/MultiObject'
        rule:
          type: string
          xml:
            name: Rule
        source:
          $ref: '#/components/schemas/NetworkLocation'
    ImportEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          destination:
            $ref: '#/components/schemas/MultiObject'
          outcome:
            $ref: '#/components/schemas/Outcome'
          source:
            $ref: '#/components/schemas/MultiObject'
    InstallEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          installationEntity:
            $ref: '#/components/schemas/InstallationEntity'
          outcome:
            $ref: '#/components/schemas/Outcome'
    InstallationEntity:
      type: object
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
      required:
      - '@type'
    Location:
      type: object
      properties:
        accessZone:
          type: string
          xml:
            name: AccessZone
        building:
          type: string
          xml:
            name: Building
        city:
          type: string
          xml:
            name: City
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        country:
          type: string
          xml:
            name: Country
        desk:
          type: string
          xml:
            name: Desk
        floor:
          type: integer
          xml:
            name: Floor
        position:
          type: string
          xml:
            name: Position
        rack:
          type: string
          xml:
            name: Rack
        room:
          type: string
          xml:
            name: Room
        site:
          type: string
          xml:
            name: Site
        state:
          type: string
          xml:
            name: State
        timeZoneName:
          type: string
          xml:
            name: TimeZoneName
        town:
          type: string
          xml:
            name: Town
    Media:
      type: object
      allOf:
      - $ref: '#/components/schemas/InstallationEntity'
      - type: object
        properties:
          capacity:
            type: integer
            xml:
              name: Capacity
          classification:
            $ref: '#/components/schemas/Classification'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          id:
            type: string
            xml:
              name: Id
          name:
            type: string
            xml:
              name: Name
          readWrite:
            type: boolean
            xml:
              name: ReadWrite
          removable:
            type: boolean
            xml:
              name: Removable
          type:
            type: string
            enum:
            - HARD_DISK
            - USB_MASS_STORAGE
            - BLU_RAY
            - DVD
            - CD
            - FLOPPY_DISK
            - TAPE
            - MEMORY_CARD
            - OTHER
            xml:
              name: Type
      required:
      - type
    MetaDataTags:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
            xml:
              name: Tag
          xml:
            name: Tag
      required:
      - tags
    MoveEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          destination:
            $ref: '#/components/schemas/MultiObject'
          outcome:
            $ref: '#/components/schemas/CopyMoveOutcome'
          source:
            $ref: '#/components/schemas/MultiObject'
      required:
      - destination
      - source
    MultiObject:
      type: object
      properties:
        objects:
          type: array
          items:
            $ref: '#/components/schemas/BaseObject'
    Network:
      type: object
      properties:
        destination:
          $ref: '#/components/schemas/NetworkLocation'
        payload:
          $ref: '#/components/schemas/MultiObject'
        processName:
          type: string
          xml:
            name: ProcessName
        rule:
          type: string
          xml:
            name: Rule
        source:
          $ref: '#/components/schemas/NetworkLocation'
      required:
      - source
    NetworkEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          bind:
            $ref: '#/components/schemas/NetworkOutcome'
          close:
            $ref: '#/components/schemas/NetworkOutcome'
          connect:
            $ref: '#/components/schemas/NetworkOutcome'
          deny:
            $ref: '#/components/schemas/NetworkOutcome'
          listen:
            $ref: '#/components/schemas/NetworkOutcome'
          open:
            $ref: '#/components/schemas/NetworkOutcome'
          permit:
            $ref: '#/components/schemas/NetworkOutcome'
          receive:
            $ref: '#/components/schemas/NetworkOutcome'
          send:
            $ref: '#/components/schemas/NetworkOutcome'
    NetworkLocation:
      type: object
      properties:
        application:
          type: string
          xml:
            name: Application
        applicationProtocol:
          type: string
          xml:
            name: ApplicationProtocol
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        device:
          $ref: '#/components/schemas/Device'
        httpMethod:
          type: string
          xml:
            name: HTTPMethod
        httpmethod:
          type: string
        icmpType:
          type: integer
          xml:
            name: ICMPType
        icmptype:
          type: integer
        port:
          type: integer
          format: int32
          xml:
            name: Port
        transportProtocol:
          type: string
          enum:
          - TCP
          - UDP
          - ICMP
          - IGMP
          - OTHER
          xml:
            name: TransportProtocol
    NetworkOutcome:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        destination:
          $ref: '#/components/schemas/NetworkLocation'
        outcome:
          $ref: '#/components/schemas/Outcome'
        payload:
          $ref: '#/components/schemas/MultiObject'
        processName:
          type: string
          xml:
            name: ProcessName
        rule:
          type: string
          xml:
            name: Rule
        source:
          $ref: '#/components/schemas/NetworkLocation'
      required:
      - source
    Not:
      type: object
      allOf:
      - $ref: '#/components/schemas/AdvancedQueryItem'
    Or:
      type: object
      allOf:
      - $ref: '#/components/schemas/AdvancedQueryItem'
    Organisation:
      type: object
      properties:
        country:
          type: string
          xml:
            name: Country
        organisation:
          type: string
          xml:
            name: Organisation
      required:
      - organisation
    OtherObject:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
    Outcome:
      type: object
      properties:
        authService:
          $ref: '#/components/schemas/AuthService'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        description:
          type: string
          xml:
            name: Description
        permitted:
          type: boolean
          xml:
            name: Permitted
        success:
          type: boolean
          xml:
            name: Success
    Permission:
      type: object
      properties:
        allowAttributes:
          type: array
          items:
            type: string
            enum:
            - AUTHOR
            - OWNER
            - READ
            - WRITE
            - EXECUTE
            xml:
              name: Allow
          xml:
            name: Allow
        denyAttributes:
          type: array
          items:
            type: string
            enum:
            - AUTHOR
            - OWNER
            - READ
            - WRITE
            - EXECUTE
            xml:
              name: Deny
          xml:
            name: Deny
        permissionEntity:
          $ref: '#/components/schemas/PermissionEntity'
    PermissionEntity:
      type: object
      discriminator:
        propertyName: '@type'
      properties:
        '@type':
          type: string
      required:
      - '@type'
    Permissions:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
          xml:
            name: Permission
      required:
      - permissions
    PermittedNationalities:
      type: object
      properties:
        nationalities:
          type: array
          items:
            type: string
            xml:
              name: Nationality
          xml:
            name: Nationality
      required:
      - nationalities
    PermittedOrganisations:
      type: object
      properties:
        permittedOrganisation:
          $ref: '#/components/schemas/Organisation'
      required:
      - permittedOrganisation
    PrintEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          action:
            type: string
            enum:
            - CREATE_JOB
            - CANCEL_JOB
            - PAUSE_JOB
            - RESUME_JOB
            - START_PRINT
            - FINISH_PRINT
            - CANCEL_PRINT
            - FAILED_PRINT
            - OTHER
            xml:
              name: Action
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          outcome:
            $ref: '#/components/schemas/Outcome'
          printJob:
            $ref: '#/components/schemas/PrintJob'
          printSettings:
            $ref: '#/components/schemas/PrintSettings'
          printer:
            $ref: '#/components/schemas/Device'
      required:
      - action
      - printJob
    PrintJob:
      type: object
      properties:
        document:
          $ref: '#/components/schemas/Document'
        pages:
          type: integer
          xml:
            name: Pages
        size:
          type: integer
          xml:
            name: Size
        submitted:
          type: string
          format: date-time
          xml:
            name: Submitted
      required:
      - document
    PrintSettings:
      type: object
      properties:
        colour:
          type: boolean
          xml:
            name: Colour
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        deviceFonts:
          type: boolean
          xml:
            name: DeviceFonts
        orientation:
          type: string
          enum:
          - PORTRAIT
          - LANDSCAPE
          xml:
            name: Orientation
        paperSize:
          type: string
          xml:
            name: PaperSize
    ProcessEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          action:
            type: string
            enum:
            - STARTUP
            - SHUTDOWN
            - EXECUTE
            - TERMINATE
            - CHANGE_DIR
            - CALL
            - ACCESS
            - REQUEST_OBJECT_HANDLE
            - REGISTER
            xml:
              name: Action
          arguments:
            type: string
            xml:
              name: Arguments
          command:
            type: string
            xml:
              name: Command
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          input:
            $ref: '#/components/schemas/MultiObject'
          outcome:
            $ref: '#/components/schemas/Outcome'
          output:
            $ref: '#/components/schemas/MultiObject'
          processId:
            type: string
            xml:
              name: ProcessId
          rule:
            type: string
            xml:
              name: Rule
          threadId:
            type: integer
            xml:
              name: ThreadId
          type:
            type: string
            enum:
            - OS
            - SERVICE
            - APPLICATION
            xml:
              name: Type
      required:
      - action
      - command
      - type
    Purpose:
      type: object
      properties:
        authorisations:
          $ref: '#/components/schemas/Authorisations'
        classification:
          $ref: '#/components/schemas/Classification'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
          xml:
            name: Data
        expectedOutcome:
          type: string
          xml:
            name: ExpectedOutcome
        justification:
          type: string
          xml:
            name: Justification
        stakeholders:
          type: string
          xml:
            name: Stakeholders
        subject:
          type: string
          xml:
            name: Subject
    Query:
      type: object
      properties:
        advanced:
          $ref: '#/components/schemas/AdvancedQuery'
        description:
          type: string
          xml:
            name: Description
        id:
          type: string
          xml:
            name: Id
        name:
          type: string
          xml:
            name: Name
        raw:
          type: string
          xml:
            name: Raw
        simple:
          $ref: '#/components/schemas/SimpleQuery'
    ReceiveEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          destination:
            $ref: '#/components/schemas/Destination'
          outcome:
            $ref: '#/components/schemas/Outcome'
          payload:
            $ref: '#/components/schemas/MultiObject'
          source:
            $ref: '#/components/schemas/Source'
      required:
      - destination
      - source
    RemoveGroups:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
          xml:
            name: Group
    Requestors:
      type: object
      properties:
        requestors:
          type: array
          items:
            $ref: '#/components/schemas/User'
          xml:
            name: Requestor
      required:
      - requestors
    Resource:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          category:
            type: string
            xml:
              name: Category
          connectionStatus:
            type: string
            xml:
              name: ConnectionStatus
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          httpMethod:
            type: string
            xml:
              name: HTTPMethod
          httpVersion:
            type: string
            xml:
              name: HTTPVersion
          httpmethod:
            type: string
          httpversion:
            type: string
          inboundContentSize:
            type: integer
            xml:
              name: InboundContentSize
          inboundHeader:
            type: string
            xml:
              name: InboundHeader
          inboundSize:
            type: integer
            xml:
              name: InboundSize
          initialResponseCode:
            type: string
            xml:
              name: InitialResponseCode
          mimeType:
            type: string
            xml:
              name: MimeType
          outboundContentSize:
            type: integer
            xml:
              name: OutboundContentSize
          outboundHeader:
            type: string
            xml:
              name: OutboundHeader
          outboundSize:
            type: integer
            xml:
              name: OutboundSize
          referrer:
            type: string
            xml:
              name: Referrer
          requestTime:
            type: integer
            xml:
              name: RequestTime
          responseCode:
            type: string
            xml:
              name: ResponseCode
          sessionId:
            type: string
            xml:
              name: SessionId
          title:
            type: string
            xml:
              name: Title
          url:
            type: string
            xml:
              name: URL
          userAgent:
            type: string
            xml:
              name: UserAgent
    ResultPage:
      type: object
      properties:
        from:
          type: integer
          xml:
            name: From
        pageNumber:
          type: integer
          xml:
            name: PageNumber
        perPage:
          type: integer
          xml:
            name: PerPage
        to:
          type: integer
          xml:
            name: To
        totalPages:
          type: integer
          xml:
            name: TotalPages
    SearchEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          classification:
            $ref: '#/components/schemas/Classification'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          dataSources:
            $ref: '#/components/schemas/DataSources'
          description:
            type: string
            xml:
              name: Description
          groups:
            $ref: '#/components/schemas/Groups'
          id:
            type: string
            xml:
              name: Id
          meta:
            type: array
            items:
              $ref: '#/components/schemas/AnyContent'
            xml:
              name: Meta
          name:
            type: string
            xml:
              name: Name
          outcome:
            $ref: '#/components/schemas/Outcome'
          permissions:
            $ref: '#/components/schemas/Permissions'
          query:
            $ref: '#/components/schemas/Query'
          resultPage:
            $ref: '#/components/schemas/ResultPage'
          results:
            $ref: '#/components/schemas/MultiObject'
          state:
            type: string
            xml:
              name: State
          tags:
            $ref: '#/components/schemas/MetaDataTags'
          totalResults:
            type: integer
            xml:
              name: TotalResults
          type:
            type: string
            xml:
              name: Type
    SearchResults:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          dataSources:
            $ref: '#/components/schemas/DataSources'
          query:
            $ref: '#/components/schemas/Query'
          resultPage:
            $ref: '#/components/schemas/ResultPage'
          results:
            $ref: '#/components/schemas/MultiObject'
          totalResults:
            type: integer
            xml:
              name: TotalResults
    SendEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          destination:
            $ref: '#/components/schemas/Destination'
          outcome:
            $ref: '#/components/schemas/Outcome'
          payload:
            $ref: '#/components/schemas/MultiObject'
          source:
            $ref: '#/components/schemas/Source'
      required:
      - destination
      - source
    Shortcut:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          accessed:
            type: string
            format: date-time
            xml:
              name: Accessed
          created:
            type: string
            format: date-time
            xml:
              name: Created
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          hash:
            $ref: '#/components/schemas/Hash'
          media:
            $ref: '#/components/schemas/Media'
          modified:
            type: string
            format: date-time
            xml:
              name: Modified
          path:
            type: string
            xml:
              name: Path
          size:
            type: integer
            xml:
              name: Size
    Signature:
      type: object
      properties:
        updated:
          type: string
          format: date-time
          xml:
            name: Updated
        version:
          type: string
          xml:
            name: Version
    SimpleQuery:
      type: object
      properties:
        exclude:
          type: string
          xml:
            name: Exclude
        include:
          type: string
          xml:
            name: Include
    Software:
      type: object
      allOf:
      - $ref: '#/components/schemas/InstallationEntity'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          id:
            type: string
            xml:
              name: Id
          manufacturer:
            type: string
            xml:
              name: Manufacturer
          name:
            type: string
            xml:
              name: Name
          version:
            type: string
            xml:
              name: Version
      required:
      - name
    Source:
      type: object
      properties:
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
    SystemDetail:
      type: object
      properties:
        classification:
          $ref: '#/components/schemas/Classification'
        description:
          type: string
          xml:
            name: Description
        environment:
          type: string
          xml:
            name: Environment
        name:
          type: string
          xml:
            name: Name
        organisation:
          type: string
          xml:
            name: Organisation
        tags:
          $ref: '#/components/schemas/Tags'
        version:
          type: string
          xml:
            name: Version
      required:
      - environment
      - name
    Tags:
      type: object
      properties:
        tag:
          type: array
          items:
            type: string
            xml:
              name: Tag
          xml:
            name: Tag
      required:
      - tag
    Term:
      type: object
      allOf:
      - $ref: '#/components/schemas/AdvancedQueryItem'
      - type: object
        properties:
          condition:
            type: string
            enum:
            - EXISTS
            - NOT_EXISTS
            - CONTAINS
            - NOT_CONTAINS
            - EMPTY
            - NOT_EMPTY
            - EQUALS
            - NOT_EQUALS
            - GREATER_THAN
            - GREATER_THAN_EQUAL_TO
            - LESS_THAN
            - LESS_THAN_EQUAL_TO
            - STARTS_WITH
            - NOT_STARTS_WITH
            - REGEX
            - NOT_REGEX
            xml:
              name: Condition
          name:
            type: string
            xml:
              name: Name
          value:
            type: string
            xml:
              name: Value
      required:
      - condition
      - name
      - value
    Threat:
      type: object
      properties:
        category:
          type: string
          enum:
          - VIRUS
          - WORM
          - HACKING_TOOL
          - SPYWARE
          - TROJAN_HORSE
          - ADWARE
          - OTHER
          xml:
            name: Category
        name:
          type: string
          xml:
            name: Name
      required:
      - category
      - name
    UninstallEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          installationEntity:
            $ref: '#/components/schemas/InstallationEntity'
          outcome:
            $ref: '#/components/schemas/Outcome'
    UnknownEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
    UpdateEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          after:
            $ref: '#/components/schemas/MultiObject'
          before:
            $ref: '#/components/schemas/MultiObject'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          outcome:
            $ref: '#/components/schemas/Outcome'
      required:
      - after
    User:
      type: object
      allOf:
      - $ref: '#/components/schemas/PermissionEntity'
      - type: object
        properties:
          classification:
            $ref: '#/components/schemas/Classification'
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          description:
            type: string
            xml:
              name: Description
          domain:
            type: string
            xml:
              name: Domain
          emailAddress:
            type: string
            xml:
              name: EmailAddress
          groups:
            $ref: '#/components/schemas/Groups'
          id:
            type: string
            xml:
              name: Id
          meta:
            type: array
            items:
              $ref: '#/components/schemas/AnyContent'
            xml:
              name: Meta
          name:
            type: string
            xml:
              name: Name
          permissions:
            $ref: '#/components/schemas/Permissions'
          state:
            type: string
            xml:
              name: State
          tags:
            $ref: '#/components/schemas/MetaDataTags'
          type:
            type: string
            xml:
              name: Type
          userDetails:
            $ref: '#/components/schemas/UserDetails'
      - $ref: '#/components/schemas/BaseObject'
      - $ref: '#/components/schemas/AuthenticationEntity'
      - $ref: '#/components/schemas/Endpoint'
    UserDetails:
      type: object
    VOIP:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          from:
            $ref: '#/components/schemas/User'
          phoneNumber:
            type: string
            xml:
              name: PhoneNumber
          to:
            type: array
            items:
              $ref: '#/components/schemas/User'
            xml:
              name: To
    ViewEventAction:
      type: object
      allOf:
      - $ref: '#/components/schemas/EventAction'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          objects:
            type: array
            items:
              $ref: '#/components/schemas/BaseObject'
          outcome:
            $ref: '#/components/schemas/Outcome'
    VirtualSession:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseObject'
      - type: object
        properties:
          data:
            type: array
            items:
              $ref: '#/components/schemas/Data'
            xml:
              name: Data
          sessionState:
            type: string
            enum:
            - PARKED
            - UNPARKED
            xml:
              name: SessionState
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
