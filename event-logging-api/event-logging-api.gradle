import groovy.json.JsonSlurper

apply plugin: 'ca.cutterslade.analyze'

archivesBaseName = "event-logging"
def schemaDir = project.file('schema')

// In this section you declare the dependencies for your production and test code
dependencies {

    // The production code uses the SLF4J logging API at compile time
    compile "org.slf4j:slf4j-api:${versions.slf4j}"

    //runtime "net.sf.saxon:Saxon-HE:${versions.saxon}"
    //runtime "ch.qos.logback:logback-classic:${versions.logback}"

    testCompile "junit:junit:${versions.junit}"
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Event-Logging",
                "Implementation-Version": versions.eventLogging,
        )
    }
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing.publications {
    mavenJava(MavenPublication) {
        artifactId "event-logging"
        from components.java
        artifact sourceJar
        artifact javadocJar
    }
}

artifacts {
    archives sourceJar
    archives javadocJar
}

clean {
    //the contents of src is transient so clear it out
    delete "src/main"
    delete "src/test"
}

tasks.compileJava.dependsOn ':event-logging-generator:runGenClasses'

//task extractJar(jarFile, sourceName) {

    //doLast {
        //copy{
            //from(zipTree(jarFile))
            //into("${buildDir}/${sourceName}")
        //}
    //}
//}

//task getLatestReleasedJarUrl(type: Exec) {
    //executable "bash" 
    //args "-c", "\'curl -s ${githubApiLatestReleaseUrl} | sed -nr \'s/\"browser_download_url\":\\s*\"(.*\\/event-logging-v[0-9\\.]+)\"/\\1/p\'\'"
    ////commandLine "curl -s ${githubApiLatestReleaseUrl} | sed -nr 's/\"browser_download_url\":\\s*\"(.*\\/event-logging-v[0-9\\.]+jar)\"/\\1/p'"

    ////store the output instead of printing to the console:
    //standardOutput = new ByteArrayOutputStream()

    //ext.output = {
        //return standardOutput.toString()
    //}
//}

//def getLatestReleasedJarUrl() {
    //def url = ["bash", "-c", "curl -s ${githubApiLatestReleaseUrl} | sed -nr 's/\"browser_download_url\":\\s*\"(.*\\/event-logging-v[0-9\\.]+jar)\"/\\1/p']+jar)\"/\\1/p'"].execute().text
    ////def url = ["bash", "-c" "curl", "-s", "${githubApiLatestReleaseUrl}", "|", "sed", "-nr", "'s/\"browser_download_url\":\\s*\"(.*\\/event-logging-v[0-9\\.]+jar)\"/\\1/p'"].execute().text
    //return url
//}

task diffAgainstLatest(type: Exec) {
    executable "../diffAgainstLatestRelease.sh"
    args "build"
}


