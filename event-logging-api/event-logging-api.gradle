apply plugin: 'ca.cutterslade.analyze'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

ext.moduleName = 'event.logging.api'

archivesBaseName = "event-logging"
def schemaDir = project.file('schema')

// In this section you declare the dependencies for your production and test code
dependencies {
    compile "javax.xml.bind:jaxb-api:${versions.jaxb_api}"

    // The production code uses the SLF4J logging API at compile time
    compile "org.slf4j:slf4j-api:${versions.slf4j}"

    //runtime "net.sf.saxon:Saxon-HE:${versions.saxon}"
    //runtime "ch.qos.logback:logback-classic:${versions.logback}"

    testCompile "org.junit.jupiter:junit-jupiter-api:${versions.junit}"
    testCompile "org.assertj:assertj-core:${versions.assertj}"
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "Event-Logging",
                "Implementation-Version": versions.eventLoggingAndSchema,
        )
    }
    version versions.eventLoggingAndSchema
}

//The xjc generated javadoc will be failed by xdoclint so we have to
//disable it for this module
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption 'Xdoclint:none', '-quiet'
    }
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    classifier = 'javadoc'
    from javadoc.destinationDir
    version versions.eventLoggingAndSchema
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    version versions.eventLoggingAndSchema
}

artifacts {
    archives sourceJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        url "https://github.com/stroom/event-logging"
    }
}

publishing.publications {
    mavenJava(MavenPublication) {
        artifactId "event-logging"
        from components.java
        artifact sourceJar
        artifact javadocJar
        pom.withXml {
            def root = asNode()
            root.appendNode('name', project.name)
            root.children().last() + pomConfig
        }
    }
}

//configuration for the bintray plugin for uploading maven artefacts to bintray
//see https://github.com/bintray/gradle-bintray-plugin
//run task bintrayUpload to push the files, assuming BINTRAY_USER/KEY are set as env vars
bintray {
    //Must never write these to log or system out
    user = System.getenv('BINTRAY_USER') //set in Travis UI
    key = System.getenv('BINTRAY_KEY') //set in Travis UI

    //The maven plugin publications to push to bintray
    publications = ['mavenJava']

    //immediately make the artefacts public
    publish = true

    pkg {
        repo = 'event-logging'
        name = 'event-logging'
        userOrg = 'stroom'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/gchq/event-logging.git'
        version {
            name = "${versions.eventLoggingAndSchema}"
            desc = "stroom-query-${versions.eventLoggingAndSchema}"
            released = new Date()
            vcsTag = "${versions.eventLoggingAndSchema}"
            gpg {
                //Bintray will self-sign the files
                sign = true //Determines whether to GPG sign the files. The default is false
            }
        }
    }
}

clean {
    //the contents of src is transient so clear it out
    delete "src/main"
    delete "src/test"
}

tasks.compileJava.dependsOn ':event-logging-generator:runGenClasses'

//Run a bash script to compare the currennt jaxb source with the latest released version so
//we can see what impact schema changes have had on the library
task diffAgainstLatest(type: Exec) {
    executable "../diffAgainstLatestRelease.sh"
    args "build"
}

tasks.build.dependsOn diffAgainstLatest


