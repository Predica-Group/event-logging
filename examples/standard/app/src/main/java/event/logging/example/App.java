/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package event.logging.example;

import event.logging.Banner;
import event.logging.DeleteEventAction;
import event.logging.EventLoggingService;
import event.logging.ViewEventAction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Scanner;

public class App {
    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);

    private static final String BANNER = "" +
            "With great power comes great responsibility.\n" +
            "Do you accept this responsibility? (y/n):";
    private final EventLoggingService eventLoggingService;

    private App() {
        eventLoggingService = new CustomEventLoggingService();
    }

    public static void main(String[] args) {
        new App().run();
    }

    public void run() {
        LOGGER.info("Running example application");

        showBanner();

        // Currently how it works
        try {
            eventLoggingService.loggedAction(
                    "DeleteFiles",
                    "Delete some files",
                    DeleteEventAction.builder().build(),
                    () -> {
                        // Do the delete and get count of files deleted
                        int fileCount = 0 ;

                        if (fileCount == 0) {
                            throw new RuntimeException("No files found to delete");
                            // This ex will cause a success:false to be logged then is re-thrown
                        }
                    }
            );
        } catch (Exception e) {
            // probably due to no files found so ignore it
        }
    }

    private void showBanner() {
        try {
            eventLoggingService.loggedAction(
                    "ShowBanner",
                    "User shown acceptable use banner",
                    ViewEventAction.builder()
                            .addBanner(Banner.builder()
                                    .withMessage("With great power comes great responsibility." +
                                            "Do you accept this responsibility?")
                                    .build())
                            .build(),
                    () -> {
                        LOGGER.info("Show banner and get confirmation");

                        final Scanner scanner = new Scanner(System.in);
                        String answer;
                        do {
                            System.out.println(BANNER);
                            answer = scanner.next().toLowerCase();
                        } while (!answer.matches("[yn]"));

                        final boolean didUserAccept = answer.equals("y");

                        if (didUserAccept) {
                            LOGGER.info("User accepted, happy days.");
                        } else {
                            throw new RuntimeException("User did not accept their responsibility.");
                        }
                    }
            );
        } catch (Exception e) {
            LOGGER.info("User did not accept, what a shame. Quiting!");
            System.exit(1);
        }
    }


}
